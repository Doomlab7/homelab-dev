---
- name: Start Container Registry
  block:
    - name: Create Container Registry Directories
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ homelab_user }}"
        group: "{{ homelab_group_name }}"
        mode: u=rwX,g=rwX,o=rX
      with_items:
        - "{{ container_registry_data_directory }}"
        - "{{ container_registry_data_directory }}/data"
    # for dynamiclly temlating out the CORS config
    - name: Get hostname
      shell: hostname
      register: hostname_output
    - name: Container Registry Docker Container
      community.docker.docker_container:
        name: "{{ container_registry_container_name }}"
        image: "{{ container_registry_image_name }}:{{ container_registry_image_version }}"
        pull: true
        volumes:
          - "{{ container_registry_data_directory }}/data:/var/lib/registry:rw"
          # - "{{ container_registry_data_directory }}/auth:/auth:rw"
        ports:
          - "{{ container_registry_port }}:5000"
        env:
          TZ: "{{ homelab_timezone }}"
          PUID: "{{ container_registry_user_id }}"
          PGID: "{{ container_registry_group_id }}"
          REGISTRY_HTTP_HEADERS_Access-Control-Allow-Origin: "[https://{{ container_registry_hostname }}-ui.{{ homelab_domain }}]"
          REGISTRY_HTTP_HEADERS_Access-Control-Allow-Methods: '[HEAD,GET,OPTIONS,DELETE]'
          REGISTRY_HTTP_HEADERS_Access-Control-Allow-Credentials: '[true]'
          REGISTRY_HTTP_HEADERS_Access-Control-Allow-Headers: '[Authorization,Accept,Cache-Control]'
          REGISTRY_HTTP_HEADERS_Access-Control-Expose-Headers: '[Docker-Content-Digest]'
          REGISTRY_STORAGE_DELETE_ENABLED: 'true'
        restart_policy: unless-stopped
        memory: "{{ container_registry_memory }}"
        labels:
          traefik.enable: "{{ container_registry_available_externally | string }}"
          traefik.http.routers.container_registry.rule: Host(`{{ container_registry_hostname }}.{{ homelab_domain }}`)
          traefik.http.routers.container_registry.tls.certresolver: letsencrypt
          traefik.http.routers.container_registry.tls.domains[0].main: "{{ homelab_domain }}"
          traefik.http.routers.container_registry.tls.domains[0].sans: "*.{{ homelab_domain }}"
          traefik.http.services.container_registry.loadbalancer.server.port: "5000"
          traefik.http.routers.container_registry.middlewares: "default-whitelist@file"
    - name: Registry UI Docker Container
      community.docker.docker_container:
        name: "container-registry-ui"
        image: "joxit/docker-registry-ui:main"
        pull: true
        ports:
          - "8087:80"
        env:
          TZ: "{{ homelab_timezone }}"
          PUID: "{{ container_registry_user_id }}"
          PGID: "{{ container_registry_group_id }}"
          SINGLE_REGISTRY: "true"
          REGISTRY_TITLE: Docker Registry UI
          DELETE_IMAGES: "true"
          SHOW_CONTENT_DIGEST: "true"
          NGINX_PROXY_PASS_URL: "http://{{ hostname_output.stdout }}:{{ container_registry_port }}"
          SHOW_CATALOG_NB_TAGS: "true"
          CATALOG_MIN_BRANCHES: "1"
          CATALOG_MAX_BRANCHES: "1"
          TAGLIST_PAGE_SIZE: "100"
          REGISTRY_SECURED: "false"
          CATALOG_ELEMENTS_LIMIT: "1000"
        restart_policy: unless-stopped
        memory: "2g"
        labels:
          traefik.enable: "{{ container_registry_available_externally | string }}"
          traefik.http.routers.container_registry_ui.rule: Host(`{{ container_registry_hostname }}-ui.{{ homelab_domain }}`)
          traefik.http.routers.container_registry_ui.tls.certresolver: letsencrypt
          traefik.http.routers.container_registry_ui.tls.domains[0].main: "{{ homelab_domain }}"
          traefik.http.routers.container_registry_ui.tls.domains[0].sans: "*.{{ homelab_domain }}"
          traefik.http.services.container_registry_ui.loadbalancer.server.port: "80"
          traefik.http.routers.container_registry_ui.middlewares: "default-whitelist@file"

- name: Stop container_registry
  block:
    - name: Stop Container Registry
      community.docker.docker_container:
        name: "{{ container_registry_container_name }}"
        state: absent
    - name: Stop Container Registry UI
      community.docker.docker_container:
        name: "container-registry-ui"
        state: absent
  when: container_registry_enabled is false
